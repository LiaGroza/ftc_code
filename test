/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="Test Linear OpMode", group="Linear Opmode")
//@Disabled
public class TestOpMode_Linear extends LinearOpMode
{
    private ElapsedTime runtime = new ElapsedTime();

    //lift motors
    private DcMotor upMotor;
    private DcMotor downMotor;

    //pin motor
    private DcMotor pinMotor;

    //omni wheels motors
    private DcMotor forwardLeftMotor;
    private DcMotor forwardRightMotor;
    private DcMotor backLeftMotor;
    private DcMotor backRightMotor;

    @Override
    public void runOpMode()
    {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables -- for pin, lift & omni wheels --. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).

        upMotor  = hardwareMap.get(DcMotor.class, "up_motor");
        downMotor  = hardwareMap.get(DcMotor.class, "down_motor");

        pinMotor  = hardwareMap.get(DcMotor.class, "pin_motor");

        forwardLeftMotor  = hardwareMap.get(DcMotor.class, "fl_motor");
        forwardRightMotor  = hardwareMap.get(DcMotor.class, "fr_motor");
        backLeftMotor  = hardwareMap.get(DcMotor.class, "bl_motor");
        backRightMotor  = hardwareMap.get(DcMotor.class, "br_motor");

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        forwardLeftMotor.setDirection(DcMotor.Direction.FORWARD);
        forwardRightMotor.setDirection(DcMotor.Direction.REVERSE);
        backLeftMotor.setDirection(DcMotor.Direction.FORWARD);
        backRightMotor.setDirection(DcMotor.Direction.REVERSE);

        upMotor.setDirection(DcMotor.Direction.FORWARD);
        downMotor.setDirection(DcMotor.Direction.FORWARD);

        waitForStart();
        runtime.reset();

        while (opModeIsActive())
        {

            double leftPower;
            double rightPower;

            //omni wheels moving in POV mode -- left stick for moving forward , right stick for turning
            double drive = -gamepad1.left_stick_y;
            double turn  =  gamepad1.right_stick_x;
            leftPower    = Range.clip(drive + turn, -1.0, 1.0) ;
            rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;

            /*forwardLeftMotor.setPower(leftPower);
            forwardRightMotor.setPower(rightPower);
            backLeftMotor.setPower(leftPower);
            backRightMotor.setPower(rightPower);*/

            if(gamepad1.dpad_up) //get the lift on / descend the robot
            {
                upMotor.setPower(0.5);
                downMotor.setPower(0.5);
            }
            else
            {
                upMotor.setPower(0.0);
                downMotor.setPower(0.0);
            }

            if(gamepad1.dpad_down) //descend the lift / get the robot on
            {
                upMotor.setPower(-0.5);
                downMotor.setPower(-0.5);
            }
            else
            {
                upMotor.setPower(0.0);
                downMotor.setPower(0.0);
            }

            if (gamepad1.dpad_right) //putting the pin in
                pinMotor.setPower(0.5);
            else
                pinMotor.setPower(0.0);

            if (gamepad1.dpad_left) // taking the pin out
                pinMotor.setPower(-0.5);
            else
                pinMotor.setPower(0.0);

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.update();
        }
    }
}
